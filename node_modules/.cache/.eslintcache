[{"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/index.js":"1","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/App.js":"2","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/reportWebVitals.js":"3","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/MainPage.js":"4","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/LoginPage.js":"5","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Topbar/topbar.js":"6","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Questionbox/questionbox.js":"7","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Recommendquestion/recommendquestion.js":"8","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/PreviewPage.js":"9","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Previewquestionbox/previewquestionbox.js":"10"},{"size":535,"mtime":1687226265281,"results":"11","hashOfConfig":"12"},{"size":625,"mtime":1688351673279,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1687226265281,"results":"14","hashOfConfig":"12"},{"size":14769,"mtime":1689576070835,"results":"15","hashOfConfig":"12"},{"size":1768,"mtime":1688351673280,"results":"16","hashOfConfig":"12"},{"size":413,"mtime":1687926234608,"results":"17","hashOfConfig":"12"},{"size":9212,"mtime":1689070289818,"results":"18","hashOfConfig":"12"},{"size":2259,"mtime":1689056485753,"results":"19","hashOfConfig":"12"},{"size":1516,"mtime":1688535886725,"results":"20","hashOfConfig":"12"},{"size":1151,"mtime":1688541632218,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n6o79z",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/index.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/App.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/reportWebVitals.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/MainPage.js",["53","54","55"],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/LoginPage.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Topbar/topbar.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Questionbox/questionbox.js",["56"],[],"import React, { useState, useRef, useEffect} from 'react'\nimport './questionbox.css'\nimport TextareaAutosize from 'react-autosize-textarea';\nimport ToggleButton from 'react-toggle-button';\nimport axios from 'axios';\n\nexport const Questionbox = (props) => {\n    const [isEdit, setIsEdit] = useState(false);\n    const [isPublic, setIsPublic] = useState(false);\n    const [isFoucs, setIsFocus] = useState(false);\n\n    // variables about follow-up questions  \n    const [followUpQuestions, setfollowUpQuestions] = useState(\"empty\");\n    const [isFollowUp, setIsFollowUp] = useState(false);\n    const [followClicked, setFollowClicked] = useState(false);\n    const [followQuestion, setFollowQuestion] = useState(\"\");\n\n    const [currentQuestion, setCurrentQuestion] = useState(\"\");\n\n    // variables about answers \n    const [prevAnswer, setPrevAnswer] = useState(\"\");\n    const [currentAnswer, setCurrentAnswer] = useState(\"\");\n\n    // check is regenerate\n    const [isRegenerate, setIsRegenerate] = useState(false);\n\n    const textAreaRef = useRef(null);\n\n    useEffect(() => {\n        setCurrentQuestion(props.question);\n        setPrevAnswer(props.answer);\n        setCurrentAnswer(props.answer);\n        setIsPublic(props.isPublic);\n    }, [])\n\n    async function addFollowUpQuestion (prevQuestion, prevAnswer) {\n        if(!isFollowUp) {\n            setIsFollowUp(true);\n            axios({\n                method: \"POST\",\n                url: \"https://qna-restapi-dxpyj.run.goorm.site/getFUQuestion\",\n                data: {\n                    title: props.title,\n                    abstract: props.abstract,\n                    question: prevQuestion,\n                    answer: prevAnswer\n                },\n                headers: {'Content-Type': 'application/json'}\n            })\n            .then ((response) => {\n                const res = response.data;\n                setfollowUpQuestions(JSON.parse((res)));\n                setIsFollowUp(false);\n            })\n            .catch(error =>{\n                console.log(\"error\");\n                setIsFollowUp(false);\n            })\n        }\n    }\n\n\n    useEffect(() => {\n        if(textAreaRef.current) {\n            textAreaRef.current.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n    }, [currentAnswer]);\n\n    // useEffect(()=> {\n    //     setIsWaitAnswer(props.isWaitAnswer);\n    //     if(props.isWaitAnswer === false) {\n    //         cancelAnswer();\n    //     }\n    // }, [props.isWaitAnswer]);\n\n    const currentAnswerHandler = (e) => {\n        e.preventDefault();\n        setCurrentAnswer(e.target.value);\n    }\n\n    function changeIsEdit() {\n        setCurrentAnswer(props.answer);\n        setIsEdit(true);\n        if(textAreaRef.current) {\n            textAreaRef.current.focus();\n        }\n    }\n\n    function cancelAnswer() {\n        setCurrentAnswer(prevAnswer);\n        setIsEdit(false);\n    }\n\n    function changeAnswer() {\n        props.updateAnswer(currentAnswer);\n        setPrevAnswer(currentAnswer);\n        setIsEdit(false);\n    }\n\n    function changePublic(isPublic) {\n        props.updatePublic(!isPublic);\n        setIsPublic(!isPublic);\n    }\n\n    function requestfollowUp() {\n        if (!isFollowUp) {\n            setfollowUpQuestions(\"empty\");\n            addFollowUpQuestion(currentQuestion, currentAnswer);\n        }\n    }\n\n    async function regenerateAnswer () {\n        setCurrentAnswer(\"Regenerate Answer...\");\n        setIsRegenerate(true);\n        setIsEdit(false);\n        await props.regenerateAnswer(currentQuestion);\n        setPrevAnswer(props.answer);\n        setCurrentAnswer(props.answer);\n        setIsRegenerate(false);\n    }\n\n    const handleFocus = () => {\n        setIsFocus(true);\n    };\n    \n    const handleBlur = () => {\n        setIsFocus(false);\n    };\n\n    const requestFollowUpQuestion = async (question) => {\n        setFollowQuestion(question);\n        setFollowClicked(true);\n        await props.addFollowUpAnswer(question, props.myIndex);\n        setFollowClicked(false);\n        setfollowUpQuestions(\"empty\");\n    }\n\n    return(\n        <div key={props.myIndex} tabIndex=\"0\" onFocus={handleFocus} onBlur={handleBlur}>\n            <div className='questionbox'>\n                <div className='contatiner'>\n                    <div className='questionbar'>\n                        <div className='question'>\n                            {currentQuestion}\n                        </div>\n                        <div className='buttons'>\n                            <div className='makepublic'>\n                                make public\n                            </div>\n                            <ToggleButton\n                                className='toggleBtn'\n                                inactiveLabel={''}\n                                activeLabel={''}\n                                colors={{\n                                    activeThumb: {\n                                        base: 'rgb(164,44,37)'\n                                    },\n                                    inactiveThumb: {\n                                        base: 'rgb(190,154,152)'\n                                    },\n                                    active: {\n                                        base: 'rgb(234,209,207)',\n                                        hover: 'rgb(242,217,215)'\n                                    },\n                                    inactive: {\n                                        base: 'rgb(234,209,207)',\n                                        hover: 'rgb(242,217,215)'\n                                    }\n                                }}\n                                containerStyle={{width:'42px'}}\n                                trackStyle={{width:'42px'}}\n                                thumbAnimateRange={[0, 24]}\n                                value={ isPublic }\n                                onToggle={(value) => {\n                                    changePublic(value);\n                                }} \n                                />\n                            <img src=\"images/trash.png\" alt={'delete button'} className='deleteBtn' onClick={props.deleteQuestion}/>\n                        </div>\n                    </div>\n                    <div className='answerbox'>\n                        <div className='answer'>\n                            {isEdit ? <TextareaAutosize className='editAnswer' ref={textAreaRef} value={currentAnswer} onChange={currentAnswerHandler} onResize={(e) => {}}/> : <div>{currentAnswer}</div>}\n                        </div>\n                        \n                        { isRegenerate ?\n                            null\n                            :\n                            <div className='buttonContainer'>\n                                {isEdit ? <div className='editBtns'><button className='cancelBtn' onClick={cancelAnswer}>cancel</button> <button className='completeBtn' onClick={changeAnswer}>complete</button></div> : <button onClick={changeIsEdit}>Edit the Answer</button>}\n                            </div>            \n                        }\n                    </div>\n                    { isRegenerate ?\n                        null\n                        :\n                        <div className='advanceBtns'>\n                            <button onClick={regenerateAnswer} className='redoBtn'><img src=\"images/redo.svg\" alt={'redo button'}/> Regenerate <b>Answer</b></button>\n                            <button onClick={requestfollowUp}>Recommend <b>Follow-up Question</b></button>\n                        </div>\n                    }\n                </div>\n                {isRegenerate?\n                    null\n                    :\n                    <img key={props.id} tabIndex=\"0\" className='handle' src=\"images/handle.svg\" alt=\"handle\" {...props.handle} onMouseDown={handleBlur} onMouseUp={handleFocus}/>       \n                }\n            </div>\n                <div className='followUpQuestionContainer'>\n                    {followClicked ? \n                        <div className='tempoQuestionbox'>\n                            <div className='questionbar'>{followQuestion}</div>\n                            <div className='answerbox'>Answer is being generated...</div>\n                        </div>\n                        :\n                        (isFoucs ?\n                            ( followUpQuestions !== \"empty\" ?\n                                (followUpQuestions.map((question, index) => (<div key={index} className='followUpQuestion' onClick={() => requestFollowUpQuestion(question)}>{question}</div>)))\n                                :\n                                (isFollowUp ?\n                                    <div className='loadingHolder'>\n                                        <img className='loading' src=\"images/loading.gif\" alt=\"loading\" />\n                                    </div>\n                                    :\n                                    null\n                                )\n                            )\n                            :\n                            null\n                        )\n                    }\n                </div> \n        </div>\n    )\n}","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Recommendquestion/recommendquestion.js",["57"],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/PreviewPage.js",["58"],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Previewquestionbox/previewquestionbox.js",["59","60"],[],{"ruleId":"61","severity":1,"message":"62","line":44,"column":25,"nodeType":"63","messageId":"64","endLine":44,"endColumn":40},{"ruleId":"65","severity":1,"message":"66","line":77,"column":8,"nodeType":"67","endLine":77,"endColumn":10,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":95,"column":8,"nodeType":"67","endLine":95,"endColumn":14,"suggestions":"70"},{"ruleId":"65","severity":1,"message":"71","line":34,"column":8,"nodeType":"67","endLine":34,"endColumn":10,"suggestions":"72"},{"ruleId":"65","severity":1,"message":"73","line":17,"column":8,"nodeType":"67","endLine":17,"endColumn":10,"suggestions":"74"},{"ruleId":"61","severity":1,"message":"75","line":12,"column":18,"nodeType":"63","messageId":"64","endLine":12,"endColumn":26},{"ruleId":"76","severity":1,"message":"77","line":22,"column":29,"nodeType":"78","endLine":22,"endColumn":57},{"ruleId":"76","severity":1,"message":"77","line":24,"column":29,"nodeType":"78","endLine":24,"endColumn":55},"no-unused-vars","'setViewerprompt' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'title' and 'url'. Either include them or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'title' and 'username'. Either include them or remove the dependency array.",["80"],"React Hook useEffect has missing dependencies: 'props.answer', 'props.isPublic', and 'props.question'. Either include them or remove the dependency array. If 'setCurrentQuestion' needs the current value of 'props.question', you can also switch to useReducer instead of useState and read 'props.question' in the reducer.",["81"],"React Hook useEffect has a missing dependency: 'props.question'. Either include it or remove the dependency array. If 'setPrevQuestion' needs the current value of 'props.question', you can also switch to useReducer instead of useState and read 'props.question' in the reducer.",["82"],"'username' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [title, url]",{"range":"91","text":"92"},"Update the dependencies array to be: [QnAs, title, username]",{"range":"93","text":"94"},"Update the dependencies array to be: [props.answer, props.isPublic, props.question]",{"range":"95","text":"96"},"Update the dependencies array to be: [props.question]",{"range":"97","text":"98"},[2891,2893],"[title, url]",[3364,3370],"[QnAs, title, username]",[1239,1241],"[props.answer, props.isPublic, props.question]",[521,523],"[props.question]"]