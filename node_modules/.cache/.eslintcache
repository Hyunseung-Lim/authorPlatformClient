[{"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/index.js":"1","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/App.js":"2","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/reportWebVitals.js":"3","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/MainPage.js":"4","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/LoginPage.js":"5","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Topbar/topbar.js":"6","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Questionbox/questionbox.js":"7","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Recommendquestion/recommendquestion.js":"8","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/index.js":"9","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/App.js":"10","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/reportWebVitals.js":"11","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Pages/MainPage.js":"12","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Pages/LoginPage.js":"13","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Topbar/topbar.js":"14","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Questionbox/questionbox.js":"15","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Recommendquestion/recommendquestion.js":"16"},{"size":535,"mtime":1687226265281,"results":"17","hashOfConfig":"18"},{"size":512,"mtime":1687833287207,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1687226265281,"results":"20","hashOfConfig":"18"},{"size":5780,"mtime":1687937350957,"results":"21","hashOfConfig":"18"},{"size":1443,"mtime":1687935443987,"results":"22","hashOfConfig":"18"},{"size":413,"mtime":1687926234608,"results":"23","hashOfConfig":"18"},{"size":4173,"mtime":1687938627034,"results":"24","hashOfConfig":"18"},{"size":464,"mtime":1687929415266,"results":"25","hashOfConfig":"18"},{"size":535,"mtime":1687226265281,"results":"26","hashOfConfig":"27"},{"size":512,"mtime":1687833287207,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1687226265281,"results":"29","hashOfConfig":"27"},{"size":5780,"mtime":1687937350957,"results":"30","hashOfConfig":"27"},{"size":1443,"mtime":1687935443987,"results":"31","hashOfConfig":"27"},{"size":413,"mtime":1687926234608,"results":"32","hashOfConfig":"27"},{"size":4173,"mtime":1687938627034,"results":"33","hashOfConfig":"27"},{"size":464,"mtime":1687929415266,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1lijyjf",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gxj1t8",{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/index.js",[],[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/App.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/reportWebVitals.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/MainPage.js",["86"],[],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useLocation } from 'react-router-dom';\n\nimport { Topbar } from '../Components/Topbar/topbar';\nimport { Questionbox } from '../Components/Questionbox/questionbox';\nimport { Recommendquestion } from '../Components/Recommendquestion/recommendquestion';\nimport './page.css'\n\n\nexport const MainPage = (props) => {\n\n    const location = useLocation();\n    const { url } = location.state;\n    const[title, setTitle] = useState(\"Title of Research Paper\");\n    const[authors, setAuthors] = useState([]);\n    const[currentQuestion, setCurrentQuestion] = useState(\"\");\n    const[recommendQs, setRecommendQs] = useState([]);\n    const[loadRQs, setLoadRQs] = useState(false);\n    const[QnAs, setQnAs] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const getApi = 'https://qna-restapi-dxpyj.run.goorm.site/getMeta/' + String(url).split('/').pop();\n                const result = await axios(getApi);\n                setTitle(String(result.data.meta[0]));\n                setAuthors(result.data.meta[2]);\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        };\n        fetchData();\n    }, []);\n\n    const currentQuestionHandler = (e) => {\n        e.preventDefault();\n        setCurrentQuestion(e.target.value);\n    }\n\n    const generateQuestion = async () => {\n        setLoadRQs(true);\n        try {\n            const getApi = 'https://qna-restapi-dxpyj.run.goorm.site/getQuestion/' + String(url).split('/').pop();\n            const result = await axios(getApi);\n            setRecommendQs(result.data.questions);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n        setLoadRQs(false);\n    }\n\n    function addQuestion (question) {\n        const answer = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\";\n        setQnAs(prevData => [...prevData, {question: String(question), answer: String(answer), isPublic: false}]);\n    }\n\n    function deleteQuestion (index) {\n        setQnAs(prevData => prevData.filter((item, i) => i !== index));\n    }\n\n    function addRecommendQuestion (question, index) {\n        addQuestion(question);\n        setRecommendQs(prevData => {\n            let newArray = [...prevData];\n            newArray.splice(index, 1);\n            return newArray;\n        })\n    }\n\n    function addCurrentQuestion () {\n        if(currentQuestion !== \"\") {\n            addQuestion(currentQuestion);\n            setCurrentQuestion(\"\");\n        }\n    }\n\n    function updateAnswer (updateIndex, newAnswer) {\n        setQnAs(prevData => (\n            prevData.map((QnA, index) => updateIndex === index ? {...QnA, answer: newAnswer } : QnA)\n        ));\n    }\n\n    function updatePublic (updateIndex, isPublic) {\n        setQnAs(prevData => (\n            prevData.map((QnA, index) => updateIndex === index ? {...QnA, isPublic: isPublic } : QnA)\n        ));\n        console.log(QnAs); \n    }\n\n    return(\n        <>\n            <div className='mainPage'>\n                <Topbar/>\n                <div className='container'>\n                    <div className='title'>\n                        {title}\n                    </div>\n                    <div className='authors'>\n                        {authors.map((author, index, arr) => (<span key={index}>{author}{index < arr.length - 1 ? ', ' : ''}</span>))}\n                    </div>\n                    <div className='previewContainer'>\n                        <button>\n                            preview\n                        </button>\n                    </div>\n                    <div className='subtitle'>\n                        Add Question\n                    </div>\n                    <div className='inputContainer'>\n                        <input value={currentQuestion} onChange={currentQuestionHandler} placeholder='Type Your Own Question'></input>\n                        <button onClick={addCurrentQuestion}>Add +</button>\n                    </div>\n                    <div className='subtitle'>\n                        Question Recommendation\n                    </div>\n                    <div className='recommendContainer'>\n                        <button className='recommendBtn' disabled={loadRQs} onClick={generateQuestion}>Recommend Question</button>\n                        {loadRQs ? <img className='loading' src=\"images/loading.gif\" alt=\"loading\" /> : recommendQs.map((rQ, index) => (<Recommendquestion question={rQ} addRecommendQuestion={() => addRecommendQuestion(rQ, index)}/>))}\n                    </div>\n                    <div className='subtitle'>\n                        QnA\n                        <button>\n                            Edit Order\n                        </button>\n                    </div>\n                    <div className='questionContainer'>\n                        { QnAs.length === 0 ? <div className='noQuestion'>No Question</div> : QnAs.map((QnA, index) => (\n                            <Questionbox key={index} question={QnA.question} answer={QnA.answer} isPublic={QnA.isPublic} updateAnswer={(newAnswer)=>updateAnswer(index, newAnswer)} updatePublic={(isPublic)=>updatePublic(index, isPublic)} deleteQuestion={() => deleteQuestion(index)}/>\n                        ))}\n                    </div>\n                </div>\n                <div className='footer'>\n                </div>\n            </div>\n        </>\n    )\n}","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/LoginPage.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Topbar/topbar.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Questionbox/questionbox.js",["87","88"],[],"import React, { useState, useRef, useEffect} from 'react'\nimport './questionbox.css'\nimport TextareaAutosize from 'react-autosize-textarea';\nimport ToggleButton from 'react-toggle-button';\n\n\nexport const Questionbox = (props) => {\n    const [isEdit, setIsEdit] = useState(false);\n    const [isPublic, setIsPublic] = useState(false);\n    const [prevAnswer, setPrevAnswer] = useState(\"\");\n    const [currentAnswer, setCurrentAnser] = useState(\"\");\n    const textAreaRef = useRef(null);\n\n    useEffect(() => {\n        setPrevAnswer(props.answer);\n        setCurrentAnser(props.answer);\n        setIsPublic(props.isPublic);\n    }, [])\n\n    useEffect(() => {\n        if(textAreaRef.current) {\n            textAreaRef.current.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n    }, [currentAnswer]);\n\n    const currentAnswerHandler = (e) => {\n        e.preventDefault();\n        setCurrentAnser(e.target.value);\n    }\n\n    function changeIsEdit() {\n        setCurrentAnser(props.answer);\n        setIsEdit(true);\n        if(textAreaRef.current) {\n            textAreaRef.current.focus();\n        }\n    }\n\n    function cancelAnswer() {\n        setCurrentAnser(prevAnswer);\n        setIsEdit(false);\n    }\n\n    function changeAnswer() {\n        props.updateAnswer(currentAnswer);\n        setPrevAnswer(currentAnswer);\n        setIsEdit(false);\n    }\n\n    function changePublic(isPublic) {\n        props.updatePublic(!isPublic);\n        setIsPublic(!isPublic);\n    }\n\n    return(\n        <>\n            <div className='questionbox'>\n                <div className='contatiner'>\n                    <div className='questionbar'>\n                        <div className='question'>\n                            {props.question}\n                        </div>\n                        <div className='buttons'>\n                            <div className='makepublic'>\n                                make public\n                            </div>\n                            <ToggleButton\n                                inactiveLabel={''}\n                                activeLabel={''}\n                                colors={{\n                                    activeThumb: {\n                                        base: 'rgb(164,44,37)'\n                                    },\n                                    inactiveThumb: {\n                                        base: 'rgb(190,154,152)'\n                                    },\n                                    active: {\n                                        base: 'rgb(234,209,207)',\n                                        hover: 'rgb(242,217,215)'\n                                    },\n                                    inactive: {\n                                        base: 'rgb(234,209,207)',\n                                        hover: 'rgb(242,217,215)'\n                                    }\n                                }}\n                                value={ isPublic }\n                                onToggle={(value) => {\n                                    changePublic(value);\n                                }} \n                                />\n                            <img src=\"images/trash.png\" className='deleteBtn' onClick={props.deleteQuestion}/>\n                        </div>\n                    </div>\n                    <div className='answerbox'>\n                        <div className='answer'>\n                            {isEdit ? <TextareaAutosize className='editAnswer' ref={textAreaRef} value={currentAnswer} onChange={currentAnswerHandler} onResize={(e) => {}}/> : <div>{props.answer}</div>}\n                        </div>\n                        <div className='buttonContainer'>\n                            {isEdit ? <div className='editBtns'><button className='cancelBtn' onClick={cancelAnswer}>cancel</button> <button className='completeBtn' onClick={changeAnswer}>complete</button></div> : <button onClick={changeIsEdit}>Edit the Answer</button>}\n                        </div>\n                    </div>\n                </div>\n                <img className='handle' src=\"images/handle.png\" alt=\"handle\" />\n            </div>\n        </>\n    )\n}","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Recommendquestion/recommendquestion.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/index.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/App.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/reportWebVitals.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Pages/MainPage.js",["89"],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Pages/LoginPage.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Topbar/topbar.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Questionbox/questionbox.js",["90","91"],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Recommendquestion/recommendquestion.js",[],[],{"ruleId":"92","severity":1,"message":"93","line":34,"column":8,"nodeType":"94","endLine":34,"endColumn":10,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":18,"column":8,"nodeType":"94","endLine":18,"endColumn":10,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":91,"column":29,"nodeType":"100","endLine":91,"endColumn":111},{"ruleId":"92","severity":1,"message":"93","line":34,"column":8,"nodeType":"94","endLine":34,"endColumn":10,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"96","line":18,"column":8,"nodeType":"94","endLine":18,"endColumn":10,"suggestions":"102"},{"ruleId":"98","severity":1,"message":"99","line":91,"column":29,"nodeType":"100","endLine":91,"endColumn":111},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["103"],"React Hook useEffect has missing dependencies: 'props.answer' and 'props.isPublic'. Either include them or remove the dependency array. If 'setPrevAnswer' needs the current value of 'props.answer', you can also switch to useReducer instead of useState and read 'props.answer' in the reducer.",["104"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["105"],["106"],{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"107","fix":"111"},{"desc":"109","fix":"112"},"Update the dependencies array to be: [url]",{"range":"113","text":"114"},"Update the dependencies array to be: [props.answer, props.isPublic]",{"range":"115","text":"116"},{"range":"117","text":"114"},{"range":"118","text":"116"},[1273,1275],"[url]",[627,629],"[props.answer, props.isPublic]",[1273,1275],[627,629]]