[{"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/index.js":"1","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/App.js":"2","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/reportWebVitals.js":"3","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/MainPage.js":"4","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/LoginPage.js":"5","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Topbar/topbar.js":"6","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Questionbox/questionbox.js":"7","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Recommendquestion/recommendquestion.js":"8","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/index.js":"9","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/App.js":"10","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/reportWebVitals.js":"11","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Pages/MainPage.js":"12","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Pages/LoginPage.js":"13","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Topbar/topbar.js":"14","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Questionbox/questionbox.js":"15","/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Recommendquestion/recommendquestion.js":"16"},{"size":535,"mtime":1687226265281,"results":"17","hashOfConfig":"18"},{"size":512,"mtime":1687833287207,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1687226265281,"results":"20","hashOfConfig":"18"},{"size":8284,"mtime":1688123179811,"results":"21","hashOfConfig":"18"},{"size":1748,"mtime":1688123179810,"results":"22","hashOfConfig":"18"},{"size":413,"mtime":1687926234608,"results":"23","hashOfConfig":"18"},{"size":4807,"mtime":1688123179810,"results":"24","hashOfConfig":"18"},{"size":464,"mtime":1687929415266,"results":"25","hashOfConfig":"18"},{"size":535,"mtime":1687226265281,"results":"26","hashOfConfig":"27"},{"size":512,"mtime":1687833287207,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1687226265281,"results":"29","hashOfConfig":"27"},{"size":8284,"mtime":1688123179811,"results":"30","hashOfConfig":"27"},{"size":1748,"mtime":1688123179810,"results":"31","hashOfConfig":"27"},{"size":413,"mtime":1687926234608,"results":"32","hashOfConfig":"27"},{"size":4807,"mtime":1688123179810,"results":"33","hashOfConfig":"27"},{"size":464,"mtime":1687929415266,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1lijyjf",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gxj1t8",{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/index.js",[],[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/App.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/reportWebVitals.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/MainPage.js",["86","87","88"],[],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useLocation } from 'react-router-dom';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nimport { Topbar } from '../Components/Topbar/topbar';\nimport { Questionbox } from '../Components/Questionbox/questionbox';\nimport { Recommendquestion } from '../Components/Recommendquestion/recommendquestion';\nimport './page.css'\n\n\n// a little function to help us with reordering the result\nconst reorder = (array, fromIndex, toIndex) => {\n    const elementToMove = array.splice(fromIndex, 1)[0];\n    array.splice(toIndex, 0, elementToMove);\n    return array;\n};\n\nexport const MainPage = (props) => {\n\n    const API_DOMAIN = \"https://lucydata.lgresearch.ai\";\n\n    const location = useLocation();\n    const { url } = location.state;\n    const[title, setTitle] = useState(\"Title of Research Paper\");\n    const[authors, setAuthors] = useState(\"\");\n    const[currentQuestion, setCurrentQuestion] = useState(\"\");\n    const[recommendQs, setRecommendQs] = useState([]);\n    const[loadRQs, setLoadRQs] = useState(false);\n    const[isEditOrder, setIsEditOrder] = useState(true);\n    const[QnAs, setQnAs] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const getApi = 'https://qna-restapi-dxpyj.run.goorm.site/getMeta/' + String(url).split('/').pop();\n                const result = await axios(getApi);\n                setTitle(String(result.data.meta[0]));\n                setAuthors(result.data.meta[2].join(\", \"));\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        };\n        fetchData();\n    }, []);\n\n    const currentQuestionHandler = (e) => {\n        e.preventDefault();\n        setCurrentQuestion(e.target.value);\n    }\n\n    const generateQuestion = async () => {\n        setLoadRQs(true);\n        try {\n            const getApi = 'https://qna-restapi-dxpyj.run.goorm.site/getQuestion/' + String(url).split('/').pop();\n            const result = await axios(getApi);\n            setRecommendQs(result.data.questions);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n        setLoadRQs(false);\n    }\n\n    async function addQuestion (question) {\n        const answer = \"Answer is being generated...\";\n\n        await axios.post(API_DOMAIN + \"/get_lucy_answer\", {\n            \"question\": question, \n            \"title\": title\n        },\n        {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        },\n        { withCredentials: true }\n        )\n        .then((response) => {\n            const res =response.data;\n            console.log(res.lucy_answer);\n            setQnAs(prevData => [...prevData, {question: String(question), answer: String(res.lucy_answer), isPublic: false}]);\n        })        \n    }\n\n    function deleteQuestion (index) {\n        setQnAs(prevData => prevData.filter((item, i) => i !== index));\n    }\n\n    function addRecommendQuestion (question, index) {\n        addQuestion(question);\n        setRecommendQs(prevData => {\n            let newArray = [...prevData];\n            newArray.splice(index, 1);\n            return newArray;\n        })\n    }\n\n    function addCurrentQuestion () {\n        if(currentQuestion !== \"\") {\n            addQuestion(currentQuestion);\n            setCurrentQuestion(\"\");\n        }\n    }\n\n    function updateAnswer (updateIndex, newAnswer) {\n        setQnAs(prevData => (\n            prevData.map((QnA, index) => updateIndex === index ? {...QnA, answer: newAnswer } : QnA)\n        ));\n    }\n\n    function updatePublic (updateIndex, isPublic) {\n        setQnAs(prevData => (\n            prevData.map((QnA, index) => updateIndex === index ? {...QnA, isPublic: isPublic } : QnA)\n        ));\n        console.log(QnAs); \n    }\n\n    function changeIsEditOrder () {\n        setIsEditOrder(!isEditOrder);\n        console.log(isEditOrder);\n    }\n\n\n    function onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n        console.log(\"onDargEnd:\", QnAs);\n        const newQnAs = reorder(\n            QnAs,\n            result.source.index,\n            result.destination.index\n        );\n        console.log(newQnAs);\n        setQnAs(newQnAs);\n    }\n\n    return(\n        <>\n            <div className='mainPage'>\n                <Topbar/>\n                <div className='container'>\n                    <div className='title'>\n                        {title}\n                    </div>\n                    <div className='authors'>\n                        {authors}\n                    </div>\n                    <div className='previewContainer'>\n                        <button className='previewBtn'>\n                            Preview\n                        </button>\n                    </div>\n                    <div className='subtitle'>\n                        Add Question\n                    </div>\n                    <div className='inputContainer'>\n                        <input value={currentQuestion} onChange={currentQuestionHandler} placeholder='Type Your Own Question'></input>\n                        <button onClick={addCurrentQuestion}>Add +</button>\n                    </div>\n                    <div className='subtitle'>\n                        Question Recommendation\n                    </div>\n                    <div className='recommendContainer'>\n                        <button className='recommendBtn' disabled={loadRQs} onClick={generateQuestion}>Recommend Question</button>\n                        {loadRQs ? <img className='loading' src=\"images/loading.gif\" alt=\"loading\" /> : recommendQs.map((rQ, index) => (<Recommendquestion question={rQ} addRecommendQuestion={() => addRecommendQuestion(rQ, index)}/>))}\n                    </div>\n                    <div className='subtitle'>\n                        QnA\n                        {/* <button className='editOrderBtn' onClick={changeIsEditOrder}>\n                            ⇅ Edit Order\n                        </button> */}\n                    </div>\n                    <DragDropContext className='questionContainer' onDragEnd={onDragEnd}>\n                        { QnAs.length === 0 ? <div className='noQuestion'>No Question</div> \n                            :\n                            <Droppable droppableId=\"droppable\">\n                                {(provided, snapshot) => (\n                                    <div\n                                        {...provided.droppableProps}\n                                        ref={provided.innerRef}\n                                        // style={getListStyle(snapshot.isDraggingOver)}\n                                    >\n                                    {QnAs.map((QnA, index) => (\n                                        <Draggable key={String(QnA.question + index)} draggableId={String(QnA.question + index)} index={index}>\n                                            {(provided, snapshot) => (\n                                                <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                >\n                                                    <Questionbox key={index} id={String(QnA.question + index)} question={QnA.question} answer={QnA.answer} isPublic={QnA.isPublic} isEditOrder={isEditOrder} updateAnswer={(newAnswer)=>updateAnswer(index, newAnswer)} updatePublic={(isPublic)=>updatePublic(index, isPublic)} deleteQuestion={() => deleteQuestion(index)} handle={provided.dragHandleProps}/>\n                                                </div>\n                                            )}\n                                        </Draggable>\n                                    ))}\n                                    {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n                        }\n                    </DragDropContext>\n                </div>\n                <div className='footer'>\n                </div>\n            </div>\n        </>\n    )\n}","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Pages/LoginPage.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Topbar/topbar.js",[],[],"/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Questionbox/questionbox.js",["89","90","91"],[],"import React, { useState, useRef, useEffect} from 'react'\nimport './questionbox.css'\nimport TextareaAutosize from 'react-autosize-textarea';\nimport ToggleButton from 'react-toggle-button';\n\n\nexport const Questionbox = (props) => {\n    const [isEdit, setIsEdit] = useState(false);\n    const [isPublic, setIsPublic] = useState(false);\n    const [isEditOrder, setIsEditOrder] = useState(false);\n    const [prevAnswer, setPrevAnswer] = useState(\"\");\n    const [currentAnswer, setCurrentAnser] = useState(\"\");\n    const textAreaRef = useRef(null);\n\n    useEffect(() => {\n        setPrevAnswer(props.answer);\n        setCurrentAnser(props.answer);\n        setIsPublic(props.isPublic);\n        setIsEditOrder(props.isEditOrder);\n        if(props.isEditOrder === false) {\n            cancelAnswer();\n        }\n    }, [])\n\n    useEffect(() => {\n        if(textAreaRef.current) {\n            textAreaRef.current.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n    }, [currentAnswer]);\n\n    useEffect(()=> {\n        setIsEditOrder(props.isEditOrder);\n        if(props.isEditOrder === false) {\n            cancelAnswer();\n        }\n    }, [props.isEditOrder]);\n\n    const currentAnswerHandler = (e) => {\n        e.preventDefault();\n        setCurrentAnser(e.target.value);\n    }\n\n    function changeIsEdit() {\n        setCurrentAnser(props.answer);\n        setIsEdit(true);\n        if(textAreaRef.current) {\n            textAreaRef.current.focus();\n        }\n    }\n\n    function cancelAnswer() {\n        setCurrentAnser(prevAnswer);\n        setIsEdit(false);\n    }\n\n    function changeAnswer() {\n        props.updateAnswer(currentAnswer);\n        setPrevAnswer(currentAnswer);\n        setIsEdit(false);\n    }\n\n    function changePublic(isPublic) {\n        props.updatePublic(!isPublic);\n        setIsPublic(!isPublic);\n    }\n\n    return(\n        <>\n            <div className='questionbox'>\n                <div className='contatiner'>\n                    <div className='questionbar'>\n                        <div className='question'>\n                            {props.question}\n                        </div>\n                        {isEditOrder ? <div className='buttons'>\n                            <div className='makepublic'>\n                                make public\n                            </div>\n                            <ToggleButton\n                                inactiveLabel={''}\n                                activeLabel={''}\n                                colors={{\n                                    activeThumb: {\n                                        base: 'rgb(164,44,37)'\n                                    },\n                                    inactiveThumb: {\n                                        base: 'rgb(190,154,152)'\n                                    },\n                                    active: {\n                                        base: 'rgb(234,209,207)',\n                                        hover: 'rgb(242,217,215)'\n                                    },\n                                    inactive: {\n                                        base: 'rgb(234,209,207)',\n                                        hover: 'rgb(242,217,215)'\n                                    }\n                                }}\n                                value={ isPublic }\n                                onToggle={(value) => {\n                                    changePublic(value);\n                                }} \n                                />\n                            <img src=\"images/trash.png\" className='deleteBtn' onClick={props.deleteQuestion}/>\n                        </div> : null}\n                    </div>\n                    <div className='answerbox'>\n                        <div className='answer'>\n                            {isEdit ? <TextareaAutosize className='editAnswer' ref={textAreaRef} value={currentAnswer} onChange={currentAnswerHandler} onResize={(e) => {}}/> : <div>{props.answer}</div>}\n                        </div>\n                        {isEditOrder ?\n                            <div className='buttonContainer'>\n                                {isEdit ? <div className='editBtns'><button className='cancelBtn' onClick={cancelAnswer}>cancel</button> <button className='completeBtn' onClick={changeAnswer}>complete</button></div> : <button onClick={changeIsEdit}>Edit the Answer</button>}\n                            </div>\n                            : null\n                        }\n                    </div>\n                </div>\n                <img key={props.id} className='handle' src=\"images/handle.svg\" alt=\"handle\" {...props.handle}/>\n                {/* {isEditOrder ? null : <img className='handle' src=\"images/handle.png\" alt=\"handle\" />} */}\n            </div>\n        </>\n    )\n}","/Users/imhyeonseung/Desktop/GIT/QAplatform/client/src/Components/Recommendquestion/recommendquestion.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/index.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/App.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/reportWebVitals.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Pages/MainPage.js",["92","93","94"],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Pages/LoginPage.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Topbar/topbar.js",[],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Questionbox/questionbox.js",["95","96","97"],[],"/Users/imhyeonseung/Desktop/GIT/authorPlatformClient/src/Components/Recommendquestion/recommendquestion.js",[],[],{"ruleId":"98","severity":1,"message":"99","line":45,"column":8,"nodeType":"100","endLine":45,"endColumn":10,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":65,"column":15,"nodeType":"104","messageId":"105","endLine":65,"endColumn":21},{"ruleId":"102","severity":1,"message":"106","line":118,"column":14,"nodeType":"104","messageId":"105","endLine":118,"endColumn":31},{"ruleId":"98","severity":1,"message":"107","line":23,"column":8,"nodeType":"100","endLine":23,"endColumn":10,"suggestions":"108"},{"ruleId":"98","severity":1,"message":"109","line":36,"column":8,"nodeType":"100","endLine":36,"endColumn":27,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":103,"column":29,"nodeType":"113","endLine":103,"endColumn":111},{"ruleId":"98","severity":1,"message":"99","line":45,"column":8,"nodeType":"100","endLine":45,"endColumn":10,"suggestions":"114"},{"ruleId":"102","severity":1,"message":"103","line":65,"column":15,"nodeType":"104","messageId":"105","endLine":65,"endColumn":21},{"ruleId":"102","severity":1,"message":"106","line":118,"column":14,"nodeType":"104","messageId":"105","endLine":118,"endColumn":31},{"ruleId":"98","severity":1,"message":"107","line":23,"column":8,"nodeType":"100","endLine":23,"endColumn":10,"suggestions":"115"},{"ruleId":"98","severity":1,"message":"109","line":36,"column":8,"nodeType":"100","endLine":36,"endColumn":27,"suggestions":"116"},{"ruleId":"111","severity":1,"message":"112","line":103,"column":29,"nodeType":"113","endLine":103,"endColumn":111},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["117"],"no-unused-vars","'answer' is assigned a value but never used.","Identifier","unusedVar","'changeIsEditOrder' is defined but never used.","React Hook useEffect has missing dependencies: 'cancelAnswer', 'props.answer', 'props.isEditOrder', and 'props.isPublic'. Either include them or remove the dependency array. If 'setPrevAnswer' needs the current value of 'props.answer', you can also switch to useReducer instead of useState and read 'props.answer' in the reducer.",["118"],"React Hook useEffect has a missing dependency: 'cancelAnswer'. Either include it or remove the dependency array.",["119"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["120"],["121"],["122"],{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"123","fix":"129"},{"desc":"125","fix":"130"},{"desc":"127","fix":"131"},"Update the dependencies array to be: [url]",{"range":"132","text":"133"},"Update the dependencies array to be: [cancelAnswer, props.answer, props.isEditOrder, props.isPublic]",{"range":"134","text":"135"},"Update the dependencies array to be: [cancelAnswer, props.isEditOrder]",{"range":"136","text":"137"},{"range":"138","text":"133"},{"range":"139","text":"135"},{"range":"140","text":"137"},[1708,1710],"[url]",[809,811],"[cancelAnswer, props.answer, props.isEditOrder, props.isPublic]",[1143,1162],"[cancelAnswer, props.isEditOrder]",[1708,1710],[809,811],[1143,1162]]